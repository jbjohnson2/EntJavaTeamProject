/*
 * Festival Tracker - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Festival;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FestivalApi
 */
@Disabled
public class FestivalApiTest {

    private final FestivalApi api = new FestivalApi();

    /**
     * Add a new festival
     *
     * Add a new festival
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFestivalTest() throws ApiException {
        String festivalName = null;
        Long regionId = null;
        Long typeId = null;
        String startDate = null;
        Festival festival = null;
        Festival response = api.addFestival(festivalName, regionId, typeId, startDate, festival);
        // TODO: test validations
    }

    /**
     * Finds All Festivals
     *
     * returns a list of all festivals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllFestivalsTest() throws ApiException {
        List<Festival> response = api.findAllFestivals();
        // TODO: test validations
    }

    /**
     * Finds Festivals by type
     *
     * Finds a list of festivals by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findFestivalsByTypeTest() throws ApiException {
        Long typeId = null;
        Festival response = api.findFestivalsByType(typeId);
        // TODO: test validations
    }

    /**
     * Find festival by ID
     *
     * Returns a single festival
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long festivalId = null;
        Festival response = api.getById(festivalId);
        // TODO: test validations
    }

    /**
     * Find festival by region
     *
     * Returns a lisf of festivals in the specified region
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByRegionTest() throws ApiException {
        Long regionId = null;
        Festival response = api.getByRegion(regionId);
        // TODO: test validations
    }

}
