/*
 * Festival Tracker - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Festival;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FestivalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FestivalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FestivalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFestival
     * @param festivalName name of festival to add (required)
     * @param regionId ID of region of festival (required)
     * @param typeId ID of type of festival (required)
     * @param startDate start date of festival (required)
     * @param festival Create a new festival (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFestivalCall(String festivalName, Long regionId, Long typeId, String startDate, Festival festival, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = festival;

        // create path and map variables
        String localVarPath = "/festivals/{festivalName}/{regionId}/{typeId}/{startDate}"
            .replaceAll("\\{" + "festivalName" + "\\}", localVarApiClient.escapeString(festivalName.toString()))
            .replaceAll("\\{" + "regionId" + "\\}", localVarApiClient.escapeString(regionId.toString()))
            .replaceAll("\\{" + "typeId" + "\\}", localVarApiClient.escapeString(typeId.toString()))
            .replaceAll("\\{" + "startDate" + "\\}", localVarApiClient.escapeString(startDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFestivalValidateBeforeCall(String festivalName, Long regionId, Long typeId, String startDate, Festival festival, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'festivalName' is set
        if (festivalName == null) {
            throw new ApiException("Missing the required parameter 'festivalName' when calling addFestival(Async)");
        }
        
        // verify the required parameter 'regionId' is set
        if (regionId == null) {
            throw new ApiException("Missing the required parameter 'regionId' when calling addFestival(Async)");
        }
        
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling addFestival(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling addFestival(Async)");
        }
        
        // verify the required parameter 'festival' is set
        if (festival == null) {
            throw new ApiException("Missing the required parameter 'festival' when calling addFestival(Async)");
        }
        

        okhttp3.Call localVarCall = addFestivalCall(festivalName, regionId, typeId, startDate, festival, _callback);
        return localVarCall;

    }

    /**
     * Add a new festival
     * Add a new festival
     * @param festivalName name of festival to add (required)
     * @param regionId ID of region of festival (required)
     * @param typeId ID of type of festival (required)
     * @param startDate start date of festival (required)
     * @param festival Create a new festival (required)
     * @return Festival
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public Festival addFestival(String festivalName, Long regionId, Long typeId, String startDate, Festival festival) throws ApiException {
        ApiResponse<Festival> localVarResp = addFestivalWithHttpInfo(festivalName, regionId, typeId, startDate, festival);
        return localVarResp.getData();
    }

    /**
     * Add a new festival
     * Add a new festival
     * @param festivalName name of festival to add (required)
     * @param regionId ID of region of festival (required)
     * @param typeId ID of type of festival (required)
     * @param startDate start date of festival (required)
     * @param festival Create a new festival (required)
     * @return ApiResponse&lt;Festival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Festival> addFestivalWithHttpInfo(String festivalName, Long regionId, Long typeId, String startDate, Festival festival) throws ApiException {
        okhttp3.Call localVarCall = addFestivalValidateBeforeCall(festivalName, regionId, typeId, startDate, festival, null);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new festival (asynchronously)
     * Add a new festival
     * @param festivalName name of festival to add (required)
     * @param regionId ID of region of festival (required)
     * @param typeId ID of type of festival (required)
     * @param startDate start date of festival (required)
     * @param festival Create a new festival (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFestivalAsync(String festivalName, Long regionId, Long typeId, String startDate, Festival festival, final ApiCallback<Festival> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFestivalValidateBeforeCall(festivalName, regionId, typeId, startDate, festival, _callback);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllFestivals
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllFestivalsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/festivals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllFestivalsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findAllFestivalsCall(_callback);
        return localVarCall;

    }

    /**
     * Finds All Festivals
     * returns a list of all festivals
     * @return List&lt;Festival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid value </td><td>  -  </td></tr>
     </table>
     */
    public List<Festival> findAllFestivals() throws ApiException {
        ApiResponse<List<Festival>> localVarResp = findAllFestivalsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Finds All Festivals
     * returns a list of all festivals
     * @return ApiResponse&lt;List&lt;Festival&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Festival>> findAllFestivalsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findAllFestivalsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Festival>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds All Festivals (asynchronously)
     * returns a list of all festivals
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllFestivalsAsync(final ApiCallback<List<Festival>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllFestivalsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Festival>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findFestivalsByType
     * @param typeId ID of type to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFestivalsByTypeCall(Long typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/festivals/types/{typeId}"
            .replaceAll("\\{" + "typeId" + "\\}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findFestivalsByTypeValidateBeforeCall(Long typeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling findFestivalsByType(Async)");
        }
        

        okhttp3.Call localVarCall = findFestivalsByTypeCall(typeId, _callback);
        return localVarCall;

    }

    /**
     * Finds Festivals by type
     * Finds a list of festivals by type
     * @param typeId ID of type to return (required)
     * @return Festival
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public Festival findFestivalsByType(Long typeId) throws ApiException {
        ApiResponse<Festival> localVarResp = findFestivalsByTypeWithHttpInfo(typeId);
        return localVarResp.getData();
    }

    /**
     * Finds Festivals by type
     * Finds a list of festivals by type
     * @param typeId ID of type to return (required)
     * @return ApiResponse&lt;Festival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Festival> findFestivalsByTypeWithHttpInfo(Long typeId) throws ApiException {
        okhttp3.Call localVarCall = findFestivalsByTypeValidateBeforeCall(typeId, null);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds Festivals by type (asynchronously)
     * Finds a list of festivals by type
     * @param typeId ID of type to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFestivalsByTypeAsync(Long typeId, final ApiCallback<Festival> _callback) throws ApiException {

        okhttp3.Call localVarCall = findFestivalsByTypeValidateBeforeCall(typeId, _callback);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById
     * @param festivalId ID of festival to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Festival not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIdCall(Long festivalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/festivals/{festivalId}"
            .replaceAll("\\{" + "festivalId" + "\\}", localVarApiClient.escapeString(festivalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long festivalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'festivalId' is set
        if (festivalId == null) {
            throw new ApiException("Missing the required parameter 'festivalId' when calling getById(Async)");
        }
        

        okhttp3.Call localVarCall = getByIdCall(festivalId, _callback);
        return localVarCall;

    }

    /**
     * Find festival by ID
     * Returns a single festival
     * @param festivalId ID of festival to return (required)
     * @return Festival
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Festival not found </td><td>  -  </td></tr>
     </table>
     */
    public Festival getById(Long festivalId) throws ApiException {
        ApiResponse<Festival> localVarResp = getByIdWithHttpInfo(festivalId);
        return localVarResp.getData();
    }

    /**
     * Find festival by ID
     * Returns a single festival
     * @param festivalId ID of festival to return (required)
     * @return ApiResponse&lt;Festival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Festival not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Festival> getByIdWithHttpInfo(Long festivalId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(festivalId, null);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find festival by ID (asynchronously)
     * Returns a single festival
     * @param festivalId ID of festival to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Festival not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIdAsync(Long festivalId, final ApiCallback<Festival> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(festivalId, _callback);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByRegion
     * @param regionId ID of region to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByRegionCall(Long regionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/festivals/regions/{regionId}"
            .replaceAll("\\{" + "regionId" + "\\}", localVarApiClient.escapeString(regionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByRegionValidateBeforeCall(Long regionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'regionId' is set
        if (regionId == null) {
            throw new ApiException("Missing the required parameter 'regionId' when calling getByRegion(Async)");
        }
        

        okhttp3.Call localVarCall = getByRegionCall(regionId, _callback);
        return localVarCall;

    }

    /**
     * Find festival by region
     * Returns a lisf of festivals in the specified region
     * @param regionId ID of region to return (required)
     * @return Festival
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public Festival getByRegion(Long regionId) throws ApiException {
        ApiResponse<Festival> localVarResp = getByRegionWithHttpInfo(regionId);
        return localVarResp.getData();
    }

    /**
     * Find festival by region
     * Returns a lisf of festivals in the specified region
     * @param regionId ID of region to return (required)
     * @return ApiResponse&lt;Festival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Festival> getByRegionWithHttpInfo(Long regionId) throws ApiException {
        okhttp3.Call localVarCall = getByRegionValidateBeforeCall(regionId, null);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find festival by region (asynchronously)
     * Returns a lisf of festivals in the specified region
     * @param regionId ID of region to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No festivals found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByRegionAsync(Long regionId, final ApiCallback<Festival> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByRegionValidateBeforeCall(regionId, _callback);
        Type localVarReturnType = new TypeToken<Festival>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
