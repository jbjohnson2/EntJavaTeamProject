openapi: 3.0.3
info:
  title: Festival Tracker - OpenAPI 3.0
  description: |-
    Introducing the Wisconsin Festival Tracker API, your ultimate solution for
    discovering and sharing festivals across Wisconsin. Whether you're a festival enthusiast,
    an event organizer, or a developer integrating festival data into your platform,
    our API simplifies the process of accessing comprehensive festival information.
  
    Key Features:
    
    Search Functionality: Easily search for festivals based on type (e.g., music, food, cultural) or region within Wisconsin.
    
    Contribution Capability: Organizers and festival-goers can add their events to the database,
    enabling others to discover and attend them.
    
    Customization Options: Developers can tailor their queries to retrieve festival data statewide,
    by specific regions, or based on event types.
    
    Seamless Integration: Incorporate festival listings into various platforms, including community pages,
    business pages, and more, to enhance user experience and engagement.
    
    Get started today with the Wisconsin Festival Tracker API and unlock a wealth of festival information
    for your users and communities.


  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080/EntJavaTeamProject_war/services/
tags:
  - name: festival
    description: Add a festival. Get a list of all festivals. Search festivals by region, type, or ID.
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: region
    description: View all regions or search for a region by ID
  - name: type
    description: View all types or search for a type by ID
paths:
  /festivals/{festivalName}/{regionId}/{typeId}/{startDate}:
    post:
      tags:
        - festival
      summary: Add a festival
      description: Add a new festival
      operationId: addFestival
      parameters:
        - name: festivalName
          in: path
          description: name of festival to add
          required: true
          schema:
            type: string
            format: "Festival"
        - name: regionId
          in: path
          description: ID of region of festival
          required: true
          schema:
            type: integer
            format: int64
        - name: typeId
          in: path
          description: ID of type of festival
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: path
          description: start date of festival (YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: '2024-01-01'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Festival'
            application/xml:
              schema:
                $ref: '#/components/schemas/Festival'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /festivals:
    get:
      tags:
        - festival
      summary: Get All Festivals
      description: Returns a list of all festivals
      operationId: findAllFestivals
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Festival'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Festival'
        '400':
          description: Invalid value
  /festivals/{festivalId}:
    get:
      tags:
        - festival
      summary: Find a festival by ID
      description: Returns a single festival
      operationId: getById
      parameters:
        - name: festivalId
          in: path
          description: ID of festival to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Festival'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Festival'
        '400':
          description: Invalid ID supplied
        '404':
          description: Festival not found
  /festivals/regions/{regionId}:
    get:
      tags:
        - festival
      summary: Find festivals by region
      description: Returns a list of festivals in the specified region
      operationId: getByRegionID
      parameters:
        - name: regionId
          in: path
          description: ID of region to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Festival'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Festival'
        '400':
          description: Invalid ID supplied
        '404':
          description: No festivals found
  /festivals/types/{typeId}:
    get:
      tags:
        - festival
      summary: Find Festivals by type
      description: Returns a list of festivals of the specified type
      operationId: findFestivalsByTypeID
      parameters:
        - name: typeId
          in: path
          description: ID of type to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Festival'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Festival'
        '400':
          description: Invalid ID supplied
        '404':
          description: No festivals found
  /regions:
    get:
      tags:
        - region
      summary: Get all regions
      description: Returns a list of all regions
      operationId: getAllRegions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /regions/{regionId}:
    get:
      tags:
        - region
      summary: Find region by ID
      description: Returns a single region
      operationId: getRegionById
      parameters:
        - name: regionId
          in: path
          description: ID of region that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          description: Invalid ID supplied
        '404':
          description: Region not found
  /types:
    get:
      tags:
        - type
      summary: Get all types
      description: Returns a list of all types
      operationId: getAllTypes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /types/{typeId}:
    get:
      tags:
        - type
      summary: Find type by ID
      description: Returns a single type
      operationId: getTypeById
      parameters:
        - name: typeId
          in: path
          description: ID of type that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Type'
        '400':
          description: Invalid ID supplied
        '404':
          description: Type not found
components:
  schemas:
    Type:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: 'exampleType'
      xml:
        name: type
    Region:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        regionName:
          type: string
          example: 'exampleRegion'
      xml:
        name: region
    Festival:
      required:
        - name
        - typeId
        - regionId
        - date
        - startDate
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 'exampleFestival'
        typeId:
          type: integer
          format: int64
          example: 4
        regionId:
          type: integer
          format: int64
          example: 7
        startDate: 
          type: string
          format: date  
          example: '2014-11-11'
    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #     type:
    #       type: string
    #     message:
    #       type: string
    #   xml:
    #     name: '##default'
  requestBodies:
    Festival:
      description: Festival object that needs to be added to the list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Festival'
        application/xml:
          schema:
            $ref: '#/components/schemas/Festival'
    FestivalArray:
      description: List of festival objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Festival'
